Program.cs
Program.cs
﻿using PrototypePattern.Concrete;
using PrototypePattern.Interfaces;

class main
{
    public static void Main(string[] args)
    {
        Ishape circle = new Circle("Red", "Circle1");
        Ishape square = new Square("Blue", "Square1");
        
        // Cloning the shapes
        Ishape clonedCircle = circle.Clone();
        Ishape clonedSquare = square.Clone();
        
        // Changing the color of the cloned shapes
        clonedCircle.SetColor("Green");
        clonedSquare.SetColor("Yellow");
        
        // Drawing the original and cloned shapes
        Console.WriteLine("Original Shapes:");
        circle.Draw();
        square.Draw();
        
        Console.WriteLine("Cloned Shapes:");
        clonedCircle.Draw();
        clonedSquare.Draw();
    }
}

------------------------------

Circle.cs
Concrete\Circle.cs
﻿using PrototypePattern.Interfaces;

namespace PrototypePattern.Concrete;

public class Circle : Ishape
{
    private string _color;
    private string _name;
    
    public Circle(string color, string name)
    {
        _color = color;
        _name = name;
    }
    
    public void Draw()
    {
        Console.WriteLine($"Drawing a circle with color {_color} and name {_name}");
    }
    
    public void SetColor(string color)
    {
        _color = color;
    }
    
    public string GetColor()
    {
        return _color;
    }
    
    public string GetName()
    {
        return _name;
    }
    
    public Ishape Clone()
    {
        return new Circle(_color, _name);
    }
}

------------------------------

Square.cs
Concrete\Square.cs
﻿using PrototypePattern.Interfaces;

namespace PrototypePattern.Concrete;

public class Square : Ishape
{
    private string _color;
    private string _name;
    
    public Square(string color, string name)
    {
        _color = color;
        _name = name;
    }
    
    public void Draw()
    {
        Console.WriteLine($"Drawing a square with color {_color} and name {_name}");
    }
    
    public void SetColor(string color)
    {
        _color = color;
    }
    
    public string GetColor()
    {
        return _color;
    }
    
    public string GetName()
    {
        return _name;
    }
    
    public Ishape Clone()
    {
        return new Square(_color, _name);
    }
    
}

------------------------------

Ishape.cs
Interfaces\Ishape.cs
﻿namespace PrototypePattern.Interfaces;

public interface Ishape
{
    void Draw();
    void SetColor(string color);
    string GetColor();
    string GetName();
    
    Ishape Clone();
}

------------------------------

.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]


------------------------------

PrototypePattern.AssemblyInfo.cs
obj\Debug\net8.0\PrototypePattern.AssemblyInfo.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("PrototypePattern")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+5eb8e092452a028a8604fee8964c1a32ad6e821e")]
[assembly: System.Reflection.AssemblyProductAttribute("PrototypePattern")]
[assembly: System.Reflection.AssemblyTitleAttribute("PrototypePattern")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.



------------------------------

PrototypePattern.GlobalUsings.g.cs
obj\Debug\net8.0\PrototypePattern.GlobalUsings.g.cs
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;


------------------------------

